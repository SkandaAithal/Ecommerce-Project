{"version":3,"file":"static/js/603.60e2224d.chunk.js","mappings":"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","sources":["Components/Login.jsx","Components/OTPverify.jsx","Components/UserVerification.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { useUserContext } from \"../context/userscontext\";\r\nimport styled from \"styled-components\";\r\nimport { CgClose } from \"react-icons/cg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nfunction Login({ setOpenOtp, fdata, setFdata }) {\r\n  const { dispatchUser } = useUserContext();\r\n  const LOGIN_URL = \"https://ecommerce-server.uk.to/users/login\";\r\n  const [errors, setErrors] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const verifyFormData = (name, value) => {\r\n    if (name === \"email\") {\r\n      if (!value) {\r\n        return { email: \"email is empty\" };\r\n      } else if (\r\n        !/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n          value\r\n        )\r\n      ) {\r\n        return { email: \"email is not in right format\" };\r\n      } else {\r\n        return { email: \"\" };\r\n      }\r\n    } else if (name === \"password\") {\r\n      if (!value) {\r\n        return { password: \"password is empty\" };\r\n      } else if (value.length < 8) {\r\n        return { password: \"password should more than 8 characters\" };\r\n      } else if (!/^[A-Za-z0-9\\@!#$%&*^?]+$/.test(value)) {\r\n        return { password: \"password is not in right format\" };\r\n      } else {\r\n        return { password: \"\" };\r\n      }\r\n    }\r\n  };\r\n  const getFormData = ({ target: { name, value } }) => {\r\n    setFdata({ ...fdata, [name]: value });\r\n    let returnedErrorObject = verifyFormData(name, value);\r\n    setErrors({ ...errors, ...returnedErrorObject });\r\n  };\r\n\r\n  async function sendLoginData(e) {\r\n    try {\r\n      setIsLoading(true);\r\n      e.preventDefault();\r\n      if (\r\n        Object.values(errors).every((emsg) => emsg === \"\") &&\r\n        Object.values(fdata).every((data) => data !== \"\")\r\n      ) {\r\n        const { data } = await axios.post(LOGIN_URL, fdata);\r\n        setIsLoading(false);\r\n        dispatchUser({\r\n          type: \"SHOW_NOTIFICATION\",\r\n          payload: { message: data.message, color: \"green\" },\r\n        });\r\n        setOpenOtp(true);\r\n      } else {\r\n        for (const key in fdata) {\r\n          if (fdata[key] === \"\") {\r\n            setErrors((prev) => {\r\n              return { ...prev, [key]: `${key} is empty` };\r\n            });\r\n          }\r\n        }\r\n        setIsLoading(false);\r\n      }\r\n    } catch (err) {\r\n      setIsLoading(false);\r\n      dispatchUser({\r\n        type: \"SHOW_NOTIFICATION\",\r\n        payload: {\r\n          message: err.response.data.message,\r\n          color: \"red\",\r\n        },\r\n      });\r\n    }\r\n  }\r\n  return (\r\n    <Wrapper>\r\n      <div\r\n        className=\"overlay\"\r\n        onClick={() => {\r\n          dispatchUser({ type: \"CLOSE_LOGIN\" });\r\n        }}\r\n      ></div>\r\n      <div className=\"login\">\r\n        <div className=\"login-close\">\r\n          <CgClose\r\n            onClick={() => {\r\n              dispatchUser({ type: \"CLOSE_LOGIN\" });\r\n            }}\r\n            className=\"login-close-icon\"\r\n          />\r\n        </div>\r\n        <div className=\"login-body\">\r\n          <h2>Login..</h2>\r\n\r\n          <form onSubmit={sendLoginData}>\r\n            <div className=\"login-body-inputs\">\r\n              <input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                onChange={getFormData}\r\n                name=\"email\"\r\n                placeholder=\"Email\"\r\n              />\r\n              {errors.email && <p>{errors.email}</p>}\r\n            </div>\r\n            <div className=\"login-body-inputs\">\r\n              <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={getFormData}\r\n              />\r\n              {errors.password && <p>{errors.password}</p>}\r\n            </div>\r\n            {isLoading ? (\r\n              <input type=\"submit\" value={\"Loading...\"} disabled />\r\n            ) : (\r\n              <input type=\"submit\" value={\"Get OTP\"} />\r\n            )}\r\n          </form>\r\n\r\n          <Link to=\"/signup\">\r\n            <p\r\n              className=\"login-body-end\"\r\n              onClick={() => {\r\n                dispatchUser({ type: \"CLOSE_LOGIN\" });\r\n              }}\r\n            >\r\n              Not Logged In? Create Your Account\r\n            </p>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n}\r\nconst Wrapper = styled.div`\r\n  p {\r\n    color: red;\r\n  }\r\n  .overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.253);\r\n    z-index: 100;\r\n  }\r\n  .login {\r\n    border-radius: 10px;\r\n    background-color: #ffffff;\r\n    width: 50dvw;\r\n    height: 45rem;\r\n    position: fixed;\r\n    inset: 0;\r\n    margin: auto;\r\n    z-index: 101;\r\n    box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);\r\n    &-close {\r\n      display: flex;\r\n      padding: 1.5rem 1.5rem 0;\r\n      justify-content: end;\r\n\r\n      &-icon {\r\n        font-size: 3rem;\r\n      }\r\n    }\r\n\r\n    &-body {\r\n      text-align: center;\r\n      max-width: 50rem;\r\n      margin: auto;\r\n      padding-inline: 2rem;\r\n      &-inputs {\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-top: 3rem;\r\n      }\r\n\r\n      &-end {\r\n        color: #f52f2f;\r\n        font-weight: bold;\r\n        margin-block: 2rem;\r\n      }\r\n      input {\r\n        border: 1px solid black !important;\r\n      }\r\n      input[type=\"submit\"] {\r\n        cursor: pointer;\r\n        transition: all 0.2s;\r\n        margin-top: 3rem;\r\n\r\n        &:hover {\r\n          background-color: ${({ theme }) => theme.colors.white};\r\n          border: 1px solid ${({ theme }) => theme.colors.btn};\r\n          color: ${({ theme }) => theme.colors.btn};\r\n          transform: scale(0.9);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @media (max-width: ${({ theme }) => theme.media.mobile}) {\r\n    .login {\r\n      width: 80dvw;\r\n    }\r\n  }\r\n`;\r\nexport default Login;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useUserContext } from \"../context/userscontext\";\r\nimport axios from \"axios\";\r\nimport { encrypt } from \"../helpers/encryptdecrypt\";\r\nimport { useSellerContext } from \"../context/sellercontext\";\r\n\r\nfunction OTPverify({ otpLength, fdata, setOpenOtp }) {\r\n  const { email, password } = fdata;\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const OTPVERIFY_URL = \"https://ecommerce-server.uk.to/users/verifyotp\";\r\n  const LOGIN_URL = \"https://ecommerce-server.uk.to/users/login\";\r\n  const [otpInput, setOtpInput] = useState(Array(otpLength).fill(\"\"));\r\n  const inputRef = useRef([]);\r\n  const [otpTime, setOtpTime] = useState(60);\r\n  const { dispatchUser } = useUserContext();\r\n  const { dispatchSeller } = useSellerContext();\r\n  const secretKey = \"sX8nD4zH1cT6kA2yP7uV3wR9qG5pL0J9\";\r\n\r\n  // ! to get the value from input field\r\n  const handleInputChange = (index, value) => {\r\n    let newOtp = [...otpInput];\r\n    newOtp[index] = value;\r\n    setOtpInput(newOtp);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let interval = setInterval(() => {\r\n      setOtpTime((prev) => prev - 1);\r\n    }, 1000);\r\n    if (otpTime <= 0) {\r\n      clearInterval(interval);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [otpTime]);\r\n\r\n  // ! to handle backspace and if value already exists then to change that value\r\n\r\n  const handleKeyUp = (index, e) => {\r\n    e.preventDefault();\r\n    let newOtp = [...otpInput];\r\n\r\n    if (e.key === \"Backspace\" && index > 0) {\r\n      newOtp[index] = \"\";\r\n      inputRef.current[index - 1].focus();\r\n    } else if (e.key === \"Backspace\" && index === 0) {\r\n      newOtp[index] = \"\";\r\n      inputRef.current[index].focus();\r\n    }\r\n\r\n    if (e.key.replace(/[^0-9]/g, \"\") && index < otpInput.length - 1) {\r\n      newOtp[index] = e.key.replace(/[^0-9]/g, \"\");\r\n      inputRef.current[index + 1].focus();\r\n    } else if (e.key.replace(/[^0-9]/g, \"\") && index < otpInput.length) {\r\n      newOtp[index] = e.key.replace(/[^0-9]/g, \"\");\r\n      inputRef.current[index].focus();\r\n    }\r\n\r\n    setOtpInput(newOtp);\r\n  };\r\n\r\n  // ! to paste the otp\r\n  const handlePaste = (e) => {\r\n    let pastedData = e.clipboardData.getData(\"text\");\r\n    pastedData = pastedData.slice(0, 6).replace(/[^0-9]/g, \"\");\r\n    let otpArray = pastedData.split(\"\");\r\n\r\n    otpArray.forEach((digit, index) => {\r\n      setOtpInput((prevOtp) => {\r\n        const updatedOtp = [...prevOtp];\r\n        updatedOtp[index] = digit;\r\n        return updatedOtp;\r\n      });\r\n    });\r\n  };\r\n\r\n  //! otp submit\r\n\r\n  async function otpSubmit(e) {\r\n    try {\r\n      e.preventDefault();\r\n      setIsLoading(true);\r\n      let otp = otpInput.join(\"\");\r\n\r\n      if (!otpTime) {\r\n        dispatchUser({\r\n          type: \"SHOW_NOTIFICATION\",\r\n          payload: {\r\n            message: \"OTP is Expired. Click on Send New OTP\",\r\n            color: \"red\",\r\n          },\r\n        });\r\n        setIsLoading(false);\r\n      } else if (otp.length !== 6) {\r\n        dispatchUser({\r\n          type: \"SHOW_NOTIFICATION\",\r\n          payload: { message: \"OTP should have 6 numbers\", color: \"red\" },\r\n        });\r\n        setIsLoading(false);\r\n      } else {\r\n        const { data } = await axios.post(OTPVERIFY_URL, { email, otp });\r\n        localStorage.setItem(\"role\", data.userData.role);\r\n        const encrypteddata = encrypt(data.token, secretKey);\r\n        localStorage.setItem(\"userToken\", encrypteddata);\r\n\r\n        setIsLoading(false);\r\n        setOpenOtp(false);\r\n        dispatchUser({\r\n          type: \"LOGIN_SUCCESSFULL\",\r\n          payload: {\r\n            message: data.message,\r\n            userData: data.userData,\r\n          },\r\n        });\r\n        dispatchSeller({ type: \"REFRESH\" });\r\n      }\r\n    } catch (err) {\r\n      setIsLoading(false);\r\n      console.log(err);\r\n      dispatchUser({\r\n        type: \"SHOW_NOTIFICATION\",\r\n        payload: {\r\n          message: err.response.data.message,\r\n          color: \"red\",\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  const sendNewOtp = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const { data } = await axios.post(LOGIN_URL, { email, password });\r\n      setOtpTime(60);\r\n      setIsLoading(false);\r\n      dispatchUser({\r\n        type: \"SHOW_NOTIFICATION\",\r\n        payload: { message: data.message, color: \"green\" },\r\n      });\r\n    } catch (err) {\r\n      setIsLoading(false);\r\n      dispatchUser({\r\n        type: \"SHOW_NOTIFICATION\",\r\n        payload: {\r\n          message: err.response.data.message,\r\n          color: \"red\",\r\n        },\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    inputRef.current[0].focus();\r\n  }, []);\r\n  return (\r\n    <Wrapper>\r\n      <div\r\n        className=\"overlay\"\r\n        onClick={() => {\r\n          dispatchUser({ type: \"CLOSE_LOGIN\" });\r\n        }}\r\n      ></div>\r\n      <div className=\"otp\">\r\n        <h2>OTP Verification</h2>\r\n        <form className=\"otp-form\" onSubmit={otpSubmit}>\r\n          <div className=\"otp-form-wrapper\">\r\n            {otpInput.map((ele, index) => {\r\n              return (\r\n                <input\r\n                  type=\"text\"\r\n                  value={otpInput[index]}\r\n                  ref={(ref) => (inputRef.current[index] = ref)}\r\n                  key={index}\r\n                  className=\"otp-form-input\"\r\n                  maxLength={1}\r\n                  onChange={(e) => {\r\n                    handleInputChange(\r\n                      index,\r\n                      e.target.value.replace(/[^0-9]/g, \"\")\r\n                    );\r\n                  }}\r\n                  onKeyUp={(e) => {\r\n                    handleKeyUp(index, e);\r\n                  }}\r\n                  onPaste={(e) => {\r\n                    handlePaste(e);\r\n                  }}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n          <p className=\"otp-form-message\">\r\n            {otpTime ? (\r\n              `OTP expires in ${otpTime}s`\r\n            ) : (\r\n              <>\r\n                OTP Expired <span onClick={sendNewOtp}>Send New OTP</span>\r\n              </>\r\n            )}\r\n          </p>\r\n          {isLoading ? (\r\n            <input type=\"submit\" value={\"Loading...\"} disabled />\r\n          ) : (\r\n            <input type=\"submit\" value={\"Login\"} />\r\n          )}\r\n        </form>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n}\r\nconst Wrapper = styled.div`\r\n  .overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.253);\r\n    z-index: 100;\r\n  }\r\n  .otp {\r\n    border-radius: 10px;\r\n    background-color: #ffffff;\r\n    width: 40dvw;\r\n    height: 35rem;\r\n    position: fixed;\r\n    inset: 0;\r\n    gap: 3rem;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    padding-block: 4.5rem;\r\n    margin: auto;\r\n    z-index: 101;\r\n    box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);\r\n\r\n    &-form {\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n      align-items: center;\r\n      gap: 2rem;\r\n\r\n      &-input {\r\n        width: 5.5rem;\r\n        padding: 2rem;\r\n        border: 1px solid black;\r\n        font-size: 2rem;\r\n      }\r\n      &-message {\r\n        color: #9c0049;\r\n        font-weight: bold;\r\n        font-size: 1.75rem;\r\n\r\n        span {\r\n          text-decoration: underline;\r\n          font-size: 2rem;\r\n          color: #000000;\r\n          cursor: pointer;\r\n        }\r\n      }\r\n      &-wrapper {\r\n        display: flex;\r\n        gap: 1rem;\r\n      }\r\n    }\r\n  }\r\n  input[type=\"submit\"] {\r\n    cursor: pointer;\r\n    transition: all 0.2s;\r\n    margin: 0;\r\n    &:hover {\r\n      background-color: ${({ theme }) => theme.colors.white};\r\n      border: 1px solid ${({ theme }) => theme.colors.btn};\r\n      color: ${({ theme }) => theme.colors.btn};\r\n      transform: scale(0.9);\r\n    }\r\n  }\r\n  @media (max-width: ${({ theme }) => theme.media.mobile}) {\r\n    .otp {\r\n      width: 90dvw;\r\n    }\r\n  }\r\n  @media (max-width: 998px) and (min-width: 768px) {\r\n    .otp {\r\n      width: 70vw;\r\n    }\r\n  }\r\n`;\r\nexport default OTPverify;\r\n","import React, { useState } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport Login from \"./Login\";\r\nimport OTPverify from \"./OTPverify\";\r\nfunction UserVerification() {\r\n  const [openOtp, setOpenOtp] = useState(false);\r\n  const [fdata, setFdata] = useState({ email: \"\", password: \"\" });\r\n  return ReactDom.createPortal(\r\n    <>\r\n      {openOtp ? (\r\n        <OTPverify otpLength={6} fdata={fdata} setOpenOtp={setOpenOtp} />\r\n      ) : (\r\n        <Login setFdata={setFdata} fdata={fdata} setOpenOtp={setOpenOtp} />\r\n      )}\r\n    </>,\r\n    document.getElementById(\"user-validation\")\r\n  );\r\n}\r\n\r\nexport default UserVerification;\r\n"],"names":["Wrapper","styled","theme","colors","white","btn","media","mobile","setOpenOtp","fdata","setFdata","dispatchUser","useUserContext","LOGIN_URL","useState","errors","setErrors","isLoading","setIsLoading","getFormData","target","name","value","returnedErrorObject","test","email","length","password","verifyFormData","e","preventDefault","Object","values","every","emsg","data","axios","type","payload","message","color","key","prev","response","className","onClick","onSubmit","id","onChange","placeholder","disabled","to","otpLength","OTPVERIFY_URL","Array","fill","otpInput","setOtpInput","inputRef","useRef","otpTime","setOtpTime","dispatchSeller","useSellerContext","secretKey","otp","join","localStorage","setItem","userData","role","encrypteddata","encrypt","token","console","log","useEffect","interval","setInterval","clearInterval","sendNewOtp","current","focus","map","ele","index","ref","maxLength","newOtp","handleInputChange","replace","onKeyUp","handleKeyUp","onPaste","pastedData","clipboardData","getData","slice","split","forEach","digit","prevOtp","updatedOtp","handlePaste","openOtp","ReactDom","document","getElementById"],"sourceRoot":""}